{"version":3,"sources":["Clock.js","IntegerBox.js","Counter.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentTime","Date","getTime","setInterval","date","getTimezoneOffset","setState","number","stringNumber","String","length","time","Math","floor","react_default","a","createElement","className","pad","Component","IntegerBox","value","update","bind","assertThisInitialized","offset","amount","max","parseInt","e","preventDefault","target","_this2","label","type","onChange","onFocus","select","onClick","Counter","running","STOP","WORK","PLAY","LONG","current","properties","title","intervalFunction","endTime","remainingTime","toggleButton","assign","breakMinutes","sessionMinutes","clearInterval","_this3","App","offsetSessionMinutes","updateSessionMinutes","offsetBreakMinutes","updateBreakMinutes","newTime","src_Clock","src_IntegerBox_0","src_Counter_0","rel","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.cc786fa3.chunk.js","sourcesContent":["import React, { Component } from \"react\";\n\nclass Clock extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      currentTime: new Date().getTime()\n    };\n\n    setInterval(() => {\n      var date =\n        new Date().getTime() - new Date().getTimezoneOffset() * 60 * 1000;\n      this.setState({ currentTime: date });\n    }, 500);\n  }\n\n  pad(number) {\n    var stringNumber = String(number);\n    if (stringNumber.length < 2) stringNumber = \"0\" + stringNumber;\n    return stringNumber;\n  }\n\n  render() {\n    const time = Math.floor(\n      (this.state.currentTime % (24 * 60 * 60 * 1000)) / 1000\n    );\n    return (\n      <div className=\"Clock\">\n        <p>\n          {this.pad(Math.floor(time / (60 * 60)))}:\n          {this.pad(Math.floor((time % (60 * 60)) / 60))}:\n          {this.pad(Math.floor(time % 60))}\n        </p>\n      </div>\n    );\n  }\n}\n\nexport default Clock;\n","import \"./IntegerBox.css\";\nimport React, { Component } from \"react\";\n\nclass IntegerBox extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      value: this.props.value\n    };\n\n    this.update = this.update.bind(this);\n    this.offset = this.offset.bind(this);\n  }\n\n  offset(amount) {\n    this.props.offset(amount);\n    this.setState({\n      value: Math.max(0, parseInt(this.state.value) + amount)\n    });\n  }\n\n  update(e) {\n    e.preventDefault();\n    this.props.update(e.target.value);\n    this.setState({\n      value: e.target.value\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"IntegerBox\">\n        <div className=\"number\">\n          <p className=\"label\">{this.props.label}</p>\n          <input\n            className=\"value\"\n            type=\"number\"\n            value={this.state.value}\n            onChange={e => {\n              this.update(e);\n            }}\n            onFocus={e => {\n              e.preventDefault();\n              e.target.select();\n            }}\n            onClick={e => {\n              e.target.select();\n            }}\n          />\n        </div>\n        <div className=\"buttons\">\n          <button className=\"offset\" onClick={() => this.offset(10)}>\n            +10\n          </button>\n          <button className=\"offset\" onClick={() => this.offset(5)}>\n            +5\n          </button>\n          <button className=\"offset\" onClick={() => this.offset(1)}>\n            +1\n          </button>\n          <button className=\"offset\" onClick={() => this.offset(-1)}>\n            -1\n          </button>\n          <button className=\"offset\" onClick={() => this.offset(-5)}>\n            -5\n          </button>\n          <button className=\"offset\" onClick={() => this.offset(-10)}>\n            -10\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default IntegerBox;\n","import \"./Counter.css\";\nimport React, { Component } from \"react\";\n\nclass Counter extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      running: {\n        STOP: 0,\n        WORK: 1,\n        PLAY: 2,\n        LONG: 3,\n        current: 0,\n        properties: [\n          { label: \"Work\", title: \"Click 'Work' to Start\" },\n          { label: \"Stop\", title: \"Work Time\" },\n          { label: \"Stop\", title: \"Play Time\" },\n          { label: \"Stop\", title: \"Long Rest\" }\n        ],\n        intervalFunction: null\n      },\n      endTime: 0,\n      remainingTime: 0\n    };\n\n    this.toggleButton = this.toggleButton.bind(this);\n  }\n\n  pad(number) {\n    var stringNumber = String(number);\n    if (stringNumber.length < 2) stringNumber = \"0\" + stringNumber;\n    return stringNumber;\n  }\n\n  toggleButton(e) {\n    e.preventDefault();\n    if (this.state.running.current === this.state.running.STOP) {\n      //      this.state.running.current = this.state.running.PLAY;\n      this.setState((state, props) => ({\n        running: Object.assign(state.running, { current: state.running.PLAY })\n      }));\n\n      //this.state.running.intervalFunction = setInterval(() => {\n      this.setState((state, props) => ({\n        running: Object.assign(state.running, {\n          intervalFunction: setInterval(() => {\n            if (new Date().getTime() > this.state.endTime) {\n              this.setState((state, props) => ({\n                endTime:\n                  new Date().getTime() +\n                  (state.running.current === state.running.WORK\n                    ? props.breakMinutes\n                    : props.sessionMinutes) *\n                    60 *\n                    1000,\n                running: Object.assign(state.running, {\n                  current: 3 - state.running.current\n                })\n              }));\n            }\n            this.setState({\n              remainingTime: this.state.endTime - new Date().getTime()\n            });\n          }, 200)\n        })\n      }));\n    } else {\n      clearInterval(this.state.running.intervalFunction);\n      this.setState((state, props) => ({\n        running: Object.assign(state.running, {\n          current: state.running.STOP,\n          intervalFunction: null\n        }),\n        endTime: 0,\n        remainingTime: 0\n      }));\n    }\n  }\n\n  render() {\n    const time = (this.state.remainingTime % (24 * 60 * 60 * 1000)) / 1000;\n    return (\n      <div className=\"Counter\">\n        <h1>\n          {this.state.running.properties[this.state.running.current].title}\n        </h1>\n        <p className=\"display\">\n          {this.pad(Math.floor(time / (60 * 60)))}:\n          {this.pad(Math.floor((time % (60 * 60)) / 60))}:\n          {this.pad(Math.floor(time % 60))}\n        </p>\n        <button className=\"toggle\" onClick={e => this.toggleButton(e)}>\n          {this.state.running.properties[this.state.running.current].label}\n        </button>\n      </div>\n    );\n  }\n}\n\nexport default Counter;\n","import React, { Component } from \"react\";\nimport \"./App.css\";\nimport Clock from \"./Clock.js\";\nimport IntegerBox from \"./IntegerBox.js\";\nimport Counter from \"./Counter.js\";\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.state = {\n      sessionMinutes: 50,\n      breakMinutes: 10\n    };\n\n    this.offsetSessionMinutes = this.offsetSessionMinutes.bind(this);\n    this.updateSessionMinutes = this.updateSessionMinutes.bind(this);\n    this.offsetBreakMinutes = this.offsetBreakMinutes.bind(this);\n    this.updateBreakMinutes = this.updateBreakMinutes.bind(this);\n  }\n\n  pad(number) {\n    var stringNumber = String(number);\n    if (stringNumber.length < 2) stringNumber = \"0\" + stringNumber;\n    return stringNumber;\n  }\n\n  offsetSessionMinutes(amount) {\n    this.setState({\n      sessionMinutes: Math.max(0, parseInt(this.state.sessionMinutes) + amount)\n    });\n  }\n\n  updateSessionMinutes(newTime) {\n    this.setState({\n      sessionMinutes: parseInt(newTime) > 0 ? parseInt(newTime) : 0\n    });\n  }\n\n  offsetBreakMinutes(amount) {\n    this.setState({\n      breakMinutes: Math.max(0, parseInt(this.state.breakMinutes) + amount)\n    });\n  }\n\n  updateBreakMinutes(newTime) {\n    this.setState({\n      breakMinutes: parseInt(newTime) > 0 ? parseInt(newTime) : 0\n    });\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div className=\"Title\">\n            <h1>DARPA</h1>\n            <h2>DARPA&apos;s Another React-based Pomodoro App</h2>\n          </div>\n          <div className=\"ClockBox\">\n            <Clock />\n          </div>\n        </header>\n        <main>\n          <nav>\n            <IntegerBox\n              label=\"Work time (in minutes)\"\n              value={this.state.sessionMinutes}\n              offset={this.offsetSessionMinutes}\n              update={this.updateSessionMinutes}\n            />\n            <IntegerBox\n              label=\"Play time (in minutes)\"\n              value={this.state.breakMinutes}\n              offset={this.offsetBreakMinutes}\n              update={this.updateBreakMinutes}\n            />\n          </nav>\n          <article>\n            <Counter\n              sessionMinutes={this.state.sessionMinutes}\n              breakMinutes={this.state.breakMinutes}\n            />\n          </article>\n        </main>\n        <footer>\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://github.com/friarhob\"\n          >\n            Friar Hob\n          </a>\n          wishes you all to have a great life!\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}