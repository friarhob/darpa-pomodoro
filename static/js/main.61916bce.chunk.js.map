{"version":3,"sources":["Clock.js","IntegerBox.js","Counter.js","App.js","serviceWorker.js","index.js"],"names":["Clock","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","state","currentTime","Date","getTime","setInterval","date","getTimezoneOffset","setState","number","stringNumber","String","length","time","Math","floor","react_default","a","createElement","className","pad","Component","IntegerBox","value","update","bind","assertThisInitialized","offset","amount","max","parseInt","e","preventDefault","target","_this2","label","type","onChange","onFocus","select","onClick","Counter","running","STOP","WORK","PLAY","LONG","current","properties","title","intervalFunction","endTime","remainingTime","toggleButton","breakMinutes","sessionMinutes","clearInterval","_this3","App","offsetSessionMinutes","updateSessionMinutes","offsetBreakMinutes","updateBreakMinutes","newTime","src_Clock","src_IntegerBox_0","src_Counter_0","rel","href","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.61916bce.chunk.js","sourcesContent":["import React, { Component } from 'react';\n\nclass Clock extends Component {\n  constructor(props)\n  {\n    super(props);\n\n    this.state = {\n      currentTime: new Date().getTime(),\n    };\n\n    setInterval(() => {\n      var date = new Date().getTime()-(new Date().getTimezoneOffset()*60*1000);\n      this.setState({currentTime: date});\n    }, 500);\n\n  }\n\n  pad(number)\n  {\n    var stringNumber = String(number);\n    if(stringNumber.length < 2) stringNumber = \"0\"+stringNumber;\n    return stringNumber;\n  }\n\n  render() {\n    const time = Math.floor((this.state.currentTime%(24*60*60*1000))/1000);\n    return (\n      <div className=\"Clock\">\n          <p>{this.pad(Math.floor(time/(60*60)))}:{this.pad(Math.floor((time%(60*60))/60))}:{this.pad(Math.floor(time%(60)))}</p>\n      </div>\n    );\n  }\n}\n\nexport default Clock;\n","import './IntegerBox.css';\nimport React, { Component } from 'react';\n\nclass IntegerBox extends Component {\n  constructor(props)\n  {\n    super(props);\n\n    this.state = {\n      value: this.props.value\n    }\n\n    this.update = this.update.bind(this);\n    this.offset = this.offset.bind(this);\n  }\n\n  offset(amount)\n  {\n      this.props.offset(amount);\n      this.setState({\n        value: Math.max(0,(parseInt(this.state.value)+amount))\n      })\n  }\n\n  update(e)\n  {\n    e.preventDefault();\n    this.props.update(e.target.value);\n    this.setState({\n      value: e.target.value\n    });\n  }\n\n\n\n  render() {\n    return (\n      <div className=\"IntegerBox\">\n          <div className=\"number\">\n            <p className=\"label\">{this.props.label}</p>\n            <input className=\"value\" type=\"number\" value={this.state.value} onChange={(e) => {this.update(e);}} onFocus={(e)=>{e.preventDefault(); e.target.select();}} onClick={(e)=>{e.target.select()}}></input>\n          </div>\n          <div className=\"buttons\">\n            <button className=\"offset\" onClick={() => this.offset(10)}>+10</button>\n            <button className=\"offset\" onClick={() => this.offset(5)}>+5</button>\n            <button className=\"offset\" onClick={() => this.offset(1)}>+1</button>\n            <button className=\"offset\" onClick={() => this.offset(-1)}>-1</button>\n            <button className=\"offset\" onClick={() => this.offset(-5)}>-5</button>\n            <button className=\"offset\" onClick={() => this.offset(-10)}>-10</button>\n          </div>\n      </div>\n    );\n  }\n}\n\nexport default IntegerBox;\n","import './Counter.css';\nimport React, { Component } from 'react';\n\nclass Counter extends Component {\n  constructor(props)\n  {\n    super(props);\n\n    this.state = {\n      running: {\n        STOP: 0,\n        WORK: 1,\n        PLAY: 2,\n        LONG: 3,\n        current: 0,\n        properties: [\n          {label: \"Work\", title: \"Click 'Work' to Start\"},\n          {label: \"Stop\", title: \"Work Time\"},\n          {label: \"Stop\", title: \"Play Time\"},\n          {label: \"Stop\", title: \"Long Rest\"}\n        ],\n        intervalFunction: null\n      },\n      endTime: 0,\n      remainingTime: 0\n    };\n\n    this.toggleButton = this.toggleButton.bind(this);\n  }\n\n  pad(number)\n  {\n    var stringNumber = String(number);\n    if(stringNumber.length < 2) stringNumber = \"0\"+stringNumber;\n    return stringNumber;\n  }\n\n  toggleButton(e)\n  {\n    e.preventDefault();\n    if(this.state.running.current == this.state.running.STOP)\n    {\n      this.state.running.current = this.state.running.PLAY;\n      this.state.running.intervalFunction = setInterval(() => {\n        if(new Date().getTime() > this.state.endTime) {\n          this.setState({\n            endTime: (new Date().getTime())+((this.state.running.current == this.state.running.WORK)?this.props.breakMinutes:this.props.sessionMinutes)*60*1000\n          });\n          this.state.running.current = 3-this.state.running.current;\n        }\n        this.setState({\n          remainingTime: (this.state.endTime - new Date().getTime())\n        });\n      }, 200);\n    }\n    else\n    {\n      this.state.running.current = this.state.running.STOP;\n      clearInterval(this.state.running.intervalFunction);\n      this.state.running.intervalFunction = null;\n      this.setState({\n        endTime: 0,\n        remainingTime: 0\n      });\n    }\n  }\n\n  render() {\n    const time = (this.state.remainingTime%(24*60*60*1000))/1000;\n    return (\n      <div className=\"Counter\">\n        <h1>{this.state.running.properties[this.state.running.current].title}</h1>\n        <p className=\"display\">{this.pad(Math.floor(time/(60*60)))}:{this.pad(Math.floor((time%(60*60))/60))}:{this.pad(Math.floor(time%(60)))}</p>\n        <button className=\"toggle\" onClick={(e) => this.toggleButton(e)}>{this.state.running.properties[this.state.running.current].label}</button>\n      </div>\n    );\n  }\n}\n\nexport default Counter;\n","import React, { Component } from 'react';\nimport './App.css';\nimport Clock from './Clock.js';\nimport IntegerBox from './IntegerBox.js';\nimport Counter from './Counter.js';\n\nclass App extends Component {\n  constructor(props)\n  {\n    super(props);\n\n    this.state = {\n      sessionMinutes: 50,\n      breakMinutes: 10\n    };\n\n    this.offsetSessionMinutes = this.offsetSessionMinutes.bind(this);\n    this.updateSessionMinutes = this.updateSessionMinutes.bind(this);\n    this.offsetBreakMinutes = this.offsetBreakMinutes.bind(this);\n    this.updateBreakMinutes = this.updateBreakMinutes.bind(this);\n\n    this.toggleButton = this.toggleButton.bind(this);\n  }\n\n  pad(number)\n  {\n    var stringNumber = String(number);\n    if(stringNumber.length < 2) stringNumber = \"0\"+stringNumber;\n    return stringNumber;\n  }\n\n  offsetSessionMinutes(amount)\n  {\n    this.setState({\n      sessionMinutes: Math.max(0,(parseInt(this.state.sessionMinutes)+amount))\n    });\n  }\n\n  updateSessionMinutes(newTime)\n  {\n    this.setState({\n      sessionMinutes: ((parseInt(newTime)>0)?parseInt(newTime):0)\n    });\n  }\n\n  offsetBreakMinutes(amount)\n  {\n    this.setState({\n      breakMinutes: Math.max(0,(parseInt(this.state.breakMinutes)+amount))\n    });\n  }\n\n  updateBreakMinutes(newTime)\n  {\n    this.setState({\n      breakMinutes: ((parseInt(newTime)>0)?parseInt(newTime):0)\n    });\n  }\n\n  toggleButton(e)\n  {\n    e.preventDefault();\n    if(this.state.running.current == this.state.running.STOP)\n    {\n      this.state.running.current = this.state.running.PLAY;\n      this.state.running.intervalFunction = setInterval(() => {\n        if(new Date().getTime() > this.state.endTime) {\n          this.setState({\n            endTime: (new Date().getTime())+((this.state.running.current == this.state.running.WORK)?this.state.breakMinutes:this.state.sessionMinutes)*60*1000\n          });\n          this.state.running.current = 3-this.state.running.current;\n        }\n        this.setState({\n          remainingTime: (this.state.endTime - new Date().getTime())\n        });\n      }, 200);\n    }\n    else\n    {\n      this.state.running.current = this.state.running.STOP;\n      clearInterval(this.state.running.intervalFunction);\n      this.state.running.intervalFunction = null;\n      this.setState({\n        endTime: 0,\n        remainingTime: 0\n      });\n    }\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <header>\n          <div className=\"Title\">\n            <h1>DARPA</h1>\n            <h2>DARPA&apos;s Another React-based Pomodoro App</h2>\n          </div>\n          <div className=\"ClockBox\">\n            <Clock />\n          </div>\n        </header>\n        <main>\n          <nav>\n            <IntegerBox label='Work time (in minutes)' value={this.state.sessionMinutes} offset={this.offsetSessionMinutes} update={this.updateSessionMinutes} />\n            <IntegerBox label='Play time (in minutes)' value={this.state.breakMinutes} offset={this.offsetBreakMinutes} update={this.updateBreakMinutes} />\n          </nav>\n          <article>\n            <Counter sessionMinutes={this.state.sessionMinutes} breakMinutes={this.state.breakMinutes} />\n          </article>\n        </main>\n        <footer>\n          <a target=\"_blank\" rel=\"noopener noreferrer\" href=\"https://github.com/friarhob\">Friar Hob</a> wishes you all to have a great life!\n        </footer>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}